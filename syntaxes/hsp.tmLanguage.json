{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "HSP",
    "patterns": [
        { "include": "#code" }
    ],
    "repository": {
        "code": {
            "patterns": [
                {"include": "#comments"},
                {"include": "#preprocessors"},
                {"include": "#keywords"},
                {"include": "#types"},
                {"include": "#insertions"},
                {"include": "#orders"},
                {"include": "#parameters"}
            ],
            "repository": {
                "preprocessors": {
                    "patterns": [
                        {
                            "name": "meta.preprocessor",
                            "match": "\\#[\\w]+"
                        }
                    ]
                },
                "keywords": {
                    "patterns": [{
                        "name": "keyword.control.hsp",
                        "match": "\\b(if|else|while|for|return|repeat|loop|goto|gosub)\\b"
                    }]
                },
                "types": {
                    "patterns": [
                        {
                            "name": "support.type.hsp",
                            "match": "\\b(int|str)\\b"
                        }
                    ]
                },
                "insertions": {
                    "patterns": [
                        {
                            "match": "^\\s*([a-zA-z\u3040-\u31ff\u3400-\u9fff\uf900-\ufaff][0-9a-zA-z\u3040-\u31ff\u3400-\u9fff\uf900-\ufaff]+)\\s*(=|\\+\\+|\\-\\-)",
                            "captures": {"1": {"name": "variable.parameter"}}
                        },
                        {
                            "match": ":\\s*([a-zA-z\u3040-\u31ff\u3400-\u9fff\uf900-\ufaff][0-9a-zA-z\u3040-\u31ff\u3400-\u9fff\uf900-\ufaff]+)\\s*=",
                            "captures": {"1": {"name": "variable.parameter"}}
                        }
                    ]
                },
                "orders": {
                    "patterns": [
                        {
                            "match": "^\\s*([a-zA-z\u3040-\u31ff\u3400-\u9fff\uf900-\ufaff][0-9a-zA-z\u3040-\u31ff\u3400-\u9fff\uf900-\ufaff]+)\\b",
                            "captures": {
                                "1": {"patterns": [{"include": "#keywords"}, {"include": "#types"}, {"match": "\\w+" , "name": "entity.name.function"}]}
                            }
                        },
                        {
                            "name": "entity.name.function",
                            "match": ":\\s*[a-zA-z\u3040-\u31ff\u3400-\u9fff\uf900-\ufaff][0-9a-zA-z\u3040-\u31ff\u3400-\u9fff\uf900-\ufaff]+\\b"
                        }
                    ]
                },
                "parameters": {
                    "patterns": [
                        {
                            "include": "#special_vals"
                        },
                        {
                            "include": "#numeric"
                        },
                        {
                            "include": "#strings"
                        },
                        {
                            "include": "#variables"
                        }
                    ],
                    "repository": {
                        "numeric": {
                            "patterns": [
                                {
                                    "name": "constant.numeric",
                                    "match": "-?[0-9]+"
                                }
                            ]
                        },
                        "special_vals": {
                            "patterns": [
                                {
                                    "name": "constant.other",
                                    "match": "%[0-9]+"
                                }
                            ]
                        },
                        "strings": {
                            "patterns":[
                                {
                                    "name": "string.quoted.double.hsp",
                                    "begin": "\"",
                                    "end": "\""
                                }
                            ]
                        },
                        "variables": {
                            "patterns": [
                                {
                                    "name": "variable.parameter",
                                    "match": "\\b[a-zA-z\u3040-\u31ff\u3400-\u9fff\uf900-\ufaff][0-9a-zA-z\u3040-\u31ff\u3400-\u9fff\uf900-\ufaff]*\\b"
                                }
                            ]
                        }
                    }
                },
                "labels": {
                    "patterns": [
                        {
                            "match": "^\\s*?(\\*\\w+)\\b",
                            "captures": {
                                "1": {"name": "entity.name.class.hsp"}
                            }
                        },
                        {
                            "match": "\\b(goto|gosub)\\s+(\\*\\w+)\\b",
                            "captures": {
                                "1": {"name": "keyword.control.hsp"},
                                "2": {"name": "entity.name.class.hsp"}
                            }
                        }
                    ]
                },
                "comments":{
                    "patterns": [
                        {
                            "include": "#semicoloncomment"
                        },
                        {
                            "include": "#doubleslashcomment"
                        },
                        {
                            "include": "#blockcomment"
                        }
                    ],
                    "repository": {
                        "semicoloncomment": {
                            "patterns": [
                                {
                                    "match": ";.*$",
                                    "name": "comment.line"
                                }
                            ]
                        },
                        "doubleslashcomment": {
                            "patterns": [
                                {
                                    "match": "//.*$",
                                    "name": "comment.line.double-slash"
                                }
                            ]
                        },
                        "blockcomment": {
                            "patterns": [
                                {
                                    "name": "comment.block",
                                    "begin": "/\\*",
                                    "end": "\\*/"
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
	"scopeName": "source.hsp"
}